# -*- coding: utf-8 -*-
"""AmazingProyect.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UHi6TGbKCmr0cZgYP55TH7EgzizemLa2
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install qiskit
# %pip install pandas
# %pip install numpy
# %pip install time
# %pip install sklearn
# %pip install matplotlib.pyplot
# %pip install pylatexenc

import pandas as pd
import numpy as np
import sklearn
import matplotlib.pyplot as plt
import time

from sklearn.datasets import load_breast_cancer
data = load_breast_cancer()

df = pd.DataFrame(data=data.data, columns=data.feature_names)
df['target'] = data.target

d = df
X = d.drop(['target'], axis = 1)
y = d['target']

scaler = sklearn.preprocessing.StandardScaler()
X = pd.DataFrame(scaler.fit_transform(X), columns = X.columns)

from sklearn.decomposition import PCA
pca = PCA(n_components = 4)
X = pca.fit_transform(X)
print(pca.explained_variance_ratio_)

from sklearn.preprocessing import MinMaxScaler
X = MinMaxScaler().fit_transform(X)

from sklearn.model_selection import train_test_split

random_seed = 333
np.random.seed(random_seed)

# Split the dataset
train_features, test_features, train_labels, test_labels = train_test_split(
    X, y, train_size=0.8, random_state=random_seed
)

from qiskit.circuit.library import ZZFeatureMap
num_features = train_features.shape[1]

feature_map = ZZFeatureMap(feature_dimension=num_features, reps=1)
#feature_map.decompose().draw(output='mpl', fold = 20, filename = 'featuremap')

from qiskit.circuit.library import RealAmplitudes

ansatz = RealAmplitudes(num_qubits=num_features, reps= 3)
ansatz.measure_all()

initial_point = np.random.random(ansatz.num_parameters)
initial_point

from sklearn.preprocessing import OneHotEncoder
encoder = OneHotEncoder()

train_labels = train_labels.to_numpy()
test_labels = test_labels.to_numpy()

train_labels_oh = encoder.fit_transform(train_labels.reshape(-1,1)).toarray()
test_label_oh = encoder.fit_transform(test_labels.reshape(-1,1)).toarray()

# Commented out IPython magic to ensure Python compatibility.
# %pip install qiskit[visualization]
# %pip install qiskit_aer
# %pip install qiskit_ibm_runtime
# %pip install matplotlib
# %pip install pylatexenc
# %pip install qiskit-transpiler-service
# %pip install git+https://github.com/qiskit-community/Quantum-Challenge-Grader.git

from qiskit_ibm_runtime.fake_provider import FakeSherbrooke
from qiskit.transpiler.preset_passmanagers import generate_preset_pass_manager



backend_answer = FakeSherbrooke()
optimization_level_answer = 3

pm = generate_preset_pass_manager(backend=backend_answer,optimization_level=optimization_level_answer)
isa_circuit = pm.run(ansatz)

# Create the VQC model
vqc = VQC(feature_map=feature_map,
          ansatz=ansatz,
          optimizer='SLSQP',
          loss='cross_entropy',
          quantum_instance=quantum_instance)

# Commented out IPython magic to ensure Python compatibility.
# %pip install qiskit-machine-learning
from qiskit-machine-learning.circuit.library import VQC